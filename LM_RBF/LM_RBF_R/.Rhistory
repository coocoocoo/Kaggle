x <- seq(-10, 10, length= 30)
y <- x
f <- function(x, y) { r <- sqrt(x^2+y^2); 10 * sin(r)/r }
z <- outer(x, y, f)
z[is.na(z)] <- 1
op <- par(bg = "white")
persp(x, y, z, theta = 30, phi = 30, expand = 0.5, col = "lightblue")
persp(x, y, z, theta = 30, phi = 30, expand = 0.5, col = "lightblue",
ltheta = 120, shade = 0.75, ticktype = "detailed",
xlab = "X", ylab = "Y", zlab = "Sinc( r )"
) -> res
round(res, 3)
f <- function(x, y) { r <- x^2 + y^2 + x*y - x + 1 }
z <- outer(x, y, f)
z[is.na(z)] <- 1
op <- par(bg = "white")
persp(x, y, z, theta = 30, phi = 30, expand = 0.5, col = "lightblue")
persp(x, y, z, theta = 30, phi = 30, expand = 0.5, col = "lightblue",
ltheta = 120, shade = 0.75, ticktype = "detailed",
xlab = "X", ylab = "Y", zlab = "Sinc( r )"
) -> res
persp(x, y, z, theta = 30, phi = 30, expand = 0.5, col = "lightblue")
persp(x, y, z, theta = 30, phi = 30, expand = 0.5, col = "lightblue",
ltheta = 120, shade = 0.75, ticktype = "detailed",
xlab = "X", ylab = "Y", zlab = "Sinc( r )"
) -> res
persp(x, y, z, theta = 30, phi = 30, expand = 0.5, col = "lightblue")
persp(x, y, z, theta = 30, phi = 30, expand = 0.5, col = "lightblue",
ltheta = 120, shade = 0.75, ticktype = "detailed",
xlab = "X", ylab = "Y", zlab = "Z"
) -> res
persp(x, y, z, theta = 30, phi = 30, expand = 0.5, col = "lightblue",
phi = 20,ltheta = 120, shade = 0.75, ticktype = "detailed",
xlab = "X", ylab = "Y", zlab = "Z"
) -> res
persp(x, y, z, theta = 30, phi = 30, expand = 0.5, col = "lightblue",
ltheta = 110, shade = 0.75, ticktype = "detailed",
xlab = "X", ylab = "Y", zlab = "Z"
) -> res
persp(x, y, z, theta = 30, phi = 30, expand = 0.5, col = "lightblue",
ltheta = 90, shade = 0.75, ticktype = "detailed",
xlab = "X", ylab = "Y", zlab = "Z"
) -> res
persp(x, y, z, theta = 30, phi = 30, expand = 0.5, col = "lightblue",
ltheta = 90, shade = 0.75, ticktype = "detailed",
xlab = "X", ylab = "Y", zlab = "Z", phi = 15
) -> res
persp(x, y, z, theta = 30, phi = 15, expand = 0.5, col = "lightblue",
ltheta = 90, shade = 0.75, ticktype = "detailed",
xlab = "X", ylab = "Y", zlab = "Z"
) -> res
rsp(x, y, z, theta = 30, phi = 32, expand = 0.5, col = "lightblue",
ltheta = 90, shade = 0.75, ticktype = "detailed",
xlab = "X", ylab = "Y", zlab = "Z"
) -> res
persp(x, y, z, theta = 30, phi = 32, expand = 0.5, col = "lightblue",
ltheta = 90, shade = 0.75, ticktype = "detailed",
xlab = "X", ylab = "Y", zlab = "Z"
) -> res
persp(x, y, z, theta = 60, phi = 32, expand = 0.5, col = "lightblue",
ltheta = 90, shade = 0.75, ticktype = "detailed",
xlab = "X", ylab = "Y", zlab = "Z"
) -> res
persp(x, y, z, theta = 35, phi = 32, expand = 0.5, col = "lightblue",
ltheta = 90, shade = 0.75, ticktype = "detailed",
xlab = "X", ylab = "Y", zlab = "Z"
) -> res
persp(x, y, z, theta = 35, phi = 40, expand = 0.5, col = "lightblue",
ltheta = 90, shade = 0.75, ticktype = "detailed",
xlab = "X", ylab = "Y", zlab = "Z"
) -> res
persp(x, y, z, theta = 35, phi = 25, expand = 0.5, col = "lightblue",
ltheta = 90, shade = 0.75, ticktype = "detailed",
xlab = "X", ylab = "Y", zlab = "Z"
) -> res
persp(x, y, z, theta = 35, phi = 20, expand = 0.5, col = "lightblue",
ltheta = 90, shade = 0.75, ticktype = "detailed",
xlab = "X", ylab = "Y", zlab = "Z"
) -> res
persp(x, y, z, theta = 45, phi = 20, expand = 0.5, col = "lightblue",
ltheta = 90, shade = 0.75, ticktype = "detailed",
xlab = "X", ylab = "Y", zlab = "Z"
) -> res
persp(x, y, z, theta = 15, phi = 20, expand = 0.5, col = "lightblue",
ltheta = 90, shade = 0.75, ticktype = "detailed",
xlab = "X", ylab = "Y", zlab = "Z"
) -> res
persp(x, y, z, theta = 20, phi = 20, expand = 0.5, col = "lightblue",
ltheta = 90, shade = 0.75, ticktype = "detailed",
xlab = "X", ylab = "Y", zlab = "Z"
) -> res
persp(x, y, z, theta = 32, phi = 20, expand = 0.5, col = "lightblue",
ltheta = 90, shade = 0.75, ticktype = "detailed",
xlab = "X", ylab = "Y", zlab = "Z"
) -> res
x <- seq(-10, 10, length= 30)
y <- x
f <- function(x, y) { r <- x^2 +y^3 + y^2 + x*y - x + 1 }
z <- outer(x, y, f)
z[is.na(z)] <- 1
op <- par(bg = "white")
persp(x, y, z, theta = 30, phi = 32, expand = 0.5, col = "lightblue",
ltheta = 90, shade = 0.75, ticktype = "detailed",
xlab = "X", ylab = "Y", zlab = "Z"
) -> res
x <- seq(-10, 10, length= 30)
y <- x
f <- function(x, y) { r <- x^2 - y^3 + y^2 + x*y - x + 1 }
z <- outer(x, y, f)
z[is.na(z)] <- 1
op <- par(bg = "white")
persp(x, y, z, theta = 30, phi = 32, expand = 0.5, col = "lightblue",
ltheta = 90, shade = 0.75, ticktype = "detailed",
xlab = "X", ylab = "Y", zlab = "Z"
) -> res
x <- seq(-10, 10, length= 30)
y <- x
f <- function(x, y) { r <- x^2 - y^3 + y^2 - 2*x*y - x + 1 }
z <- outer(x, y, f)
z[is.na(z)] <- 1
op <- par(bg = "white")
persp(x, y, z, theta = 30, phi = 32, expand = 0.5, col = "lightblue",
ltheta = 90, shade = 0.75, ticktype = "detailed",
xlab = "X", ylab = "Y", zlab = "Z"
) -> res
x <- seq(-10, 10, length= 30)
y <- x
f <- function(x, y) { r <- x^2 - y^3 + y^2 - 20*x*y - x + 1 }
z <- outer(x, y, f)
z[is.na(z)] <- 1
op <- par(bg = "white")
persp(x, y, z, theta = 30, phi = 32, expand = 0.5, col = "lightblue",
ltheta = 90, shade = 0.75, ticktype = "detailed",
xlab = "X", ylab = "Y", zlab = "Z"
) -> res
x <- seq(-10, 10, length= 30)
y <- x
f <- function(x, y) { r <- x^2 + y^2 - 5*x*y - x + 1 }
z <- outer(x, y, f)
z[is.na(z)] <- 1
op <- par(bg = "white")
persp(x, y, z, theta = 30, phi = 32, expand = 0.5, col = "lightblue",
ltheta = 90, shade = 0.75, ticktype = "detailed",
xlab = "X", ylab = "Y", zlab = "Z"
) -> res
x <- seq(-10, 10, length= 30)
y <- x
f <- function(x, y) { r <- x^2 + y^2 - x*y - x + 1 }
z <- outer(x, y, f)
z[is.na(z)] <- 1
op <- par(bg = "white")
persp(x, y, z, theta = 30, phi = 32, expand = 0.5, col = "lightblue",
ltheta = 90, shade = 0.75, ticktype = "detailed",
xlab = "X", ylab = "Y", zlab = "Z"
) -> res
x <- seq(-10, 10, length= 30)
y <- x
f <- function(x, y) { r <- x^2 - y^2 - x*y - x + 1 }
z <- outer(x, y, f)
z[is.na(z)] <- 1
op <- par(bg = "white")
persp(x, y, z, theta = 30, phi = 32, expand = 0.5, col = "lightblue",
ltheta = 90, shade = 0.75, ticktype = "detailed",
xlab = "X", ylab = "Y", zlab = "Z"
) -> res
persp(x, y, z, theta = 60, phi = 32, expand = 0.5, col = "lightblue",
ltheta = 90, shade = 0.75, ticktype = "detailed",
xlab = "X", ylab = "Y", zlab = "Z"
) -> res
persp(x, y, z, theta = 90, phi = 32, expand = 0.5, col = "lightblue",
ltheta = 90, shade = 0.75, ticktype = "detailed",
xlab = "X", ylab = "Y", zlab = "Z"
) -> res
persp(x, y, z, theta = 90, phi = 0, expand = 0.5, col = "lightblue",
ltheta = 90, shade = 0.75, ticktype = "detailed",
xlab = "X", ylab = "Y", zlab = "Z"
) -> res
L=5
runif(L)*2*ep - ep;
ep=0.001
runif(L)*2*ep - ep;
runif(L)
runif(L)
runif(L)
d=2
diag(x = 1, d)
install.packages("data.table")
install.packages("gsubfn")
install.packages("plot3D")
install.packages("scatterplot3d")
#setwd("E:/Dropbox/Kaggle - House Prices Advanced Regression Techniques")
library(data.table);
ptm <- proc.time()
#demo_LM_RBF 2016/10/08
#MATLAB code transformation
#source("https://raw.githubusercontent.com/ggrothendieck/gsubfn/master/R/list.R")
#devtools::install_github("ggrothendieck/gsubfn")
library(gsubfn)
library(plot3D)
library(scatterplot3d)
source("update_net.R")
source("cross_distance.R")
source("derivative_RBF.R")
source("evaRBF.R")
source("LM_RBF.R")
source("readkey.R")
#x : Nxd
# y : 1xN
N=200;d=2;
x=matrix(runif(N*d,0,1),nrow= N);
y=exp(-x[,1]^2 - x[,2]^2);
y=t(t(y));
tempout=LM_RBF(x,y,50);
Net = tempout$Net;
theta = tempout$theta; rm(theta);
tempout=evaRBF(x,Net);
yhat = tempout$y;
D = tempout$D;rm(tempout);
mean((y-yhat)^2)/2
scatterplot3d(x[,1],x[,2],y,color='red', main="3D Scatterplot")
par(new=TRUE)
scatterplot3d(x[,1],x[,2],yhat, main="3D Scatterplot")
proc.time()-ptm
#N=200;d=3;
#x=rand(N,d)*2-1;
#y=tanh(-x(:,1).^2-x(:,2).^2);
#y=y';
#Net=LM_RBF(x,y);
#[yhat,D]=evaRBF(x,Net);
#mean((y-yhat).^2)/2
library(data.table);
ptm <- proc.time()
library(gsubfn)
library(plot3D)
library(scatterplot3d)
source("update_net.R")
source("cross_distance.R")
source("derivative_RBF.R")
source("evaRBF.R")
setwd("E:/Dropbox/Kaggle Competition - 1StateFarm/LM_RBF")
library(data.table);
ptm <- proc.time()
#demo_LM_RBF 2016/10/08
#MATLAB code transformation
#source("https://raw.githubusercontent.com/ggrothendieck/gsubfn/master/R/list.R")
#devtools::install_github("ggrothendieck/gsubfn")
library(gsubfn)
library(plot3D)
library(scatterplot3d)
source("update_net.R")
source("cross_distance.R")
source("derivative_RBF.R")
source("evaRBF.R")
source("LM_RBF.R")
source("readkey.R")
#x : Nxd
# y : 1xN
N=200;d=2;
x=matrix(runif(N*d,0,1),nrow= N);
y=exp(-x[,1]^2 - x[,2]^2);
y=t(t(y));
tempout=LM_RBF(x,y,50);
Net = tempout$Net;
theta = tempout$theta; rm(theta);
tempout=evaRBF(x,Net);
yhat = tempout$y;
D = tempout$D;rm(tempout);
mean((y-yhat)^2)/2
scatterplot3d(x[,1],x[,2],y,color='red', main="3D Scatterplot")
par(new=TRUE)
scatterplot3d(x[,1],x[,2],yhat, main="3D Scatterplot")
proc.time()-ptm
#N=200;d=3;
#x=rand(N,d)*2-1;
#y=tanh(-x(:,1).^2-x(:,2).^2);
#y=y';
#Net=LM_RBF(x,y);
#[yhat,D]=evaRBF(x,Net);
#mean((y-yhat).^2)/2
#setwd("E:/Dropbox/Kaggle - House Prices Advanced Regression Techniques")
library(data.table);
ptm <- proc.time()
#demo_LM_RBF 2016/10/08
#MATLAB code transformation
#source("https://raw.githubusercontent.com/ggrothendieck/gsubfn/master/R/list.R")
#devtools::install_github("ggrothendieck/gsubfn")
library(gsubfn)
library(plot3D)
library(scatterplot3d)
source("update_net.R")
source("cross_distance.R")
source("derivative_RBF.R")
source("evaRBF.R")
source("LM_RBF.R")
source("readkey.R")
#x : Nxd
# y : 1xN
N=200;d=2;
x=matrix(runif(N*d,0,1),nrow= N);
y=exp(-x[,1]^2 - x[,2]^2);
y=t(t(y));
tempout=LM_RBF(x,y,50);
Net = tempout$Net;
theta = tempout$theta; rm(theta);
tempout=evaRBF(x,Net);
yhat = tempout$y;
D = tempout$D;rm(tempout);
mean((y-yhat)^2)/2
scatterplot3d(x[,1],x[,2],y,color='red', main="3D Scatterplot")
par(new=TRUE)
scatterplot3d(x[,1],x[,2],yhat, main="3D Scatterplot")
proc.time()-ptm
#N=200;d=3;
#x=rand(N,d)*2-1;
#y=tanh(-x(:,1).^2-x(:,2).^2);
#y=y';
#Net=LM_RBF(x,y);
#[yhat,D]=evaRBF(x,Net);
#mean((y-yhat).^2)/2
#setwd("E:/Dropbox/Kaggle - House Prices Advanced Regression Techniques")
library(data.table);
ptm <- proc.time()
#demo_LM_RBF 2016/10/08
#MATLAB code transformation
#source("https://raw.githubusercontent.com/ggrothendieck/gsubfn/master/R/list.R")
#devtools::install_github("ggrothendieck/gsubfn")
library(gsubfn)
library(plot3D)
library(scatterplot3d)
source("update_net.R")
source("cross_distance.R")
source("derivative_RBF.R")
source("evaRBF.R")
source("LM_RBF.R")
source("readkey.R")
#x : Nxd
# y : 1xN
N=200;d=2;
x=matrix(runif(N*d,0,1),nrow= N);
y=tanh(-x[,1]^2 - x[,2]^2);
y=t(t(y));
tempout=LM_RBF(x,y,50);
Net = tempout$Net;
theta = tempout$theta; rm(theta);
tempout=evaRBF(x,Net);
yhat = tempout$y;
D = tempout$D;rm(tempout);
mean((y-yhat)^2)/2
scatterplot3d(x[,1],x[,2],y,color='red', main="3D Scatterplot")
par(new=TRUE)
scatterplot3d(x[,1],x[,2],yhat, main="3D Scatterplot")
proc.time()-ptm
#N=200;d=3;
#x=rand(N,d)*2-1;
#y=tanh(-x(:,1).^2-x(:,2).^2);
#y=y';
#Net=LM_RBF(x,y);
#[yhat,D]=evaRBF(x,Net);
#mean((y-yhat).^2)/2
#setwd("E:/Dropbox/Kaggle - House Prices Advanced Regression Techniques")
library(data.table);
ptm <- proc.time()
#demo_LM_RBF 2016/10/08
#MATLAB code transformation
#source("https://raw.githubusercontent.com/ggrothendieck/gsubfn/master/R/list.R")
#devtools::install_github("ggrothendieck/gsubfn")
library(gsubfn)
library(plot3D)
library(scatterplot3d)
source("update_net.R")
source("cross_distance.R")
source("derivative_RBF.R")
source("evaRBF.R")
source("LM_RBF.R")
source("readkey.R")
#x : Nxd
# y : 1xN
N=200;d=2;
x=matrix(runif(N*d,0,1),nrow= N);
y=exp(-x[,1]^2 - x[,2]^2);
y=t(t(y));
tempout=LM_RBF(x,y,50);
Net = tempout$Net;
theta = tempout$theta; rm(theta);
tempout=evaRBF(x,Net);
yhat = tempout$y;
D = tempout$D;rm(tempout);
mean((y-yhat)^2)/2
scatterplot3d(x[,1],x[,2],y,color='red', main="3D Scatterplot")
par(new=TRUE)
scatterplot3d(x[,1],x[,2],yhat, main="3D Scatterplot")
proc.time()-ptm
#N=200;d=3;
#x=rand(N,d)*2-1;
#y=tanh(-x(:,1).^2-x(:,2).^2);
#y=y';
#Net=LM_RBF(x,y);
#[yhat,D]=evaRBF(x,Net);
#mean((y-yhat).^2)/2
